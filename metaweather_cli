#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem "httparty"
  gem "dry-cli"
end

module MetaWeather
  module Api
    class Location
      include HTTParty
      base_uri 'https://www.metaweather.com/api/location'

      def forecast(woeid)
        self.class.get("/#{woeid}")
      end

      def query(query)
        self.class.get('/search/', query: { "query" => query })
      end

      def lattlong(latt: , long:)
        self.class.get('/search/', query: { "lattlong" => "#{latt},#{long}" })
      end
    end
  end

  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc "Print version"

        def call(*)
          puts "1.0.0"
        end
      end

      class Search < Dry::CLI::Command
        desc "Search for weather by location name"

        argument :location, required: true, desc: "Location search string"
        option :for_tomorrow, type: :boolean, default: false, desc: "Print weather just for tomorrow"

        def call(location:, **options)
          api = Api::Location.new
          response = api.query(location)
          if response.any?
            # First result is the most likely hit
            woeid = response.first["woeid"]
            forecast_response = api.forecast(woeid)
            puts "Weather for #{forecast_response['parent']['title']}"
            weather_data_for_days =
              if options.fetch(:for_tomorrow)
                forecast_response["consolidated_weather"]
                  .select{|entry| entry["applicable_date"] == (Date.today + 1).to_s}
              else
                forecast_response["consolidated_weather"]
              end
            weather_data_for_days.each do |weather_data|
              puts format_weather(weather_data)
            end
          else
            puts "Location not found"
          end
        end

        def format_weather(data)
          "#{data['applicable_date']} - #{data['weather_state_name']}"
        end
      end

      class LattLong < Dry::CLI::Command
        desc "Search for weather by latitude and longitude, you need to prepend arguments with -- when using negative latt or long"

        argument :latt, required: true
        argument :long, required: true

        example [
          "-- -35.666431 105.972572"
        ]

        def call(latt:, long:)
          response = Api::Location.new.lattlong(latt: latt, long: long)
          puts response.body
        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]
      register "search", Search, aliases: ["search", "s"]
      register "lattlong", LattLong, aliases: ["lattlong", "ll"]
    end
  end
end

Dry::CLI.new(MetaWeather::CLI::Commands).call

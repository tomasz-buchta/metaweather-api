#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem "httparty"
  gem "dry-cli"
end

module MetaWeather
  module Api
    class Location
      include HTTParty
      base_uri 'https://www.metaweather.com/api/location'

      def forecast(woeid)
        self.class.get("/#{woeid}")
      end

      def query(query)
        self.class.get('/search/', query: { "query" => query })
      end
    end
  end

  class DayForecast
    def initialize(entry)
      @entry = entry
    end

    def date
      Date.parse(entry["applicable_date"])
    end

    def weather_state
      entry['weather_state_name']
    end

    private

    attr_reader :entry
  end

  class Forecast
    attr_accessor :day_forecasts

    def initialize(response)
      @response = response
      @day_forecasts =
        response["consolidated_weather"].map { |entry| DayForecast.new(entry) }
    end

    def location_name
      response['parent']['title']
    end

    private

    attr_reader :response
  end

  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc "Print version"

        def call(*)
          puts "1.0.0"
        end
      end

      class Search < Dry::CLI::Command
        desc "Search for weather by location name"

        argument :location, required: true, desc: "Location search string"
        option :for_tomorrow, type: :boolean, default: false, desc: "Print weather just for tomorrow"

        def call(location:, **options)
          api = Api::Location.new
          response = api.query(location)
          if response.any?
            # First result is the most likely hit
            woeid = response.first["woeid"]
            forecast_response = api.forecast(woeid)
            forecast = Forecast.new(forecast_response)
            forecasts_to_display =
              if options.fetch(:for_tomorrow)
                forecast.day_forecasts.select { |f| f.date == Date.today + 1 }
              else
                forecast.day_forecasts
              end

            puts "Weather for #{forecast.location_name}"
            forecasts_to_display.each do |f|
              puts format_day_forecast(f)
            end
          else
            puts "Location not found"
          end
        end

        def format_day_forecast(forecast)
          "#{forecast.date} - #{forecast.weather_state}"
        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]
      register "search", Search, aliases: ["search", "s"]
    end
  end
end

Dry::CLI.new(MetaWeather::CLI::Commands).call
